#include <iostream>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <chrono>
#include <thread>

// Define the maximum number of threads globally
const int MAX_THREADS = 4;

// Structure to hold the arguments for each thread
struct ThreadArgs {
    int thread_id;
    std::vector<std::vector<int>>& A;
    std::vector<std::vector<int>>& B;
    std::vector<std::vector<int>>& C;
    int size;
};

// Function to initialize a matrix with random values
void initializeMatrix(std::vector<std::vector<int>>& matrix, int size) {
    for (int i = 0; i < size; ++i) {
        for (int j = 0; j < size; ++j) {
            matrix[i][j] = rand() % 10; // Generates random values between 0 and 9
        }
    }
}

// Function to perform matrix multiplication for a specific range of rows
void matrixMultiplyThread(ThreadArgs& args) {
    int start_row = args.thread_id * (args.size / MAX_THREADS);
    int end_row = (args.thread_id + 1) * (args.size / MAX_THREADS);

    for (int i = start_row; i < end_row; ++i) {
        for (int j = 0; j < args.size; ++j) {
            args.C[i][j] = 0;
            for (int k = 0; k < args.size; ++k) {
                args.C[i][j] += args.A[i][k] * args.B[k][j];
            }
        }
    }
}

void performMatrixMultiplication(int size, int num_threads) {
    auto start_time = std::chrono::high_resolution_clock::now();

    // Dynamically allocate memory for matrices A, B, and C using vectors
    std::vector<std::vector<int>> A(size, std::vector<int>(size));
    std::vector<std::vector<int>> B(size, std::vector<int>(size));
    std::vector<std::vector<int>> C(size, std::vector<int>(size));

    // Initialize matrices A and B with random values
    initializeMatrix(A, size);
    initializeMatrix(B, size);

    // Creating threads and perform parallel matrix multiplication
    std::vector<std::thread> threads;
    std::vector<ThreadArgs> thread_args;

    for (int i = 0; i < num_threads; ++i) {
        thread_args.emplace_back(ThreadArgs{i, A, B, C, size});
        threads.emplace_back(matrixMultiplyThread, std::ref(thread_args[i]));
    }

    // Waiting for all threads to finish
    for (auto& thread : threads) {
        thread.join();
    }

    auto end_time = std::chrono::high_resolution_clock::now();
    auto duration_parallel = std::chrono::duration_cast<std::chrono::microseconds>(end_time - start_time);


    std::cout << "Matrix size: " << size << ", Threads: " << num_threads
              << ", Parallel Execution time: " << duration_parallel.count() << " microseconds" << std::endl;
}

int main() {
    // Set the seed for random number generation
    srand(time(NULL));

    // Loop over different matrix sizes and thread counts
    for (int size = 3; size <= 6; ++size) {
        for (int num_threads = 2; num_threads <= MAX_THREADS; ++num_threads) {
            // Perform matrix multiplication for the current configuration
            performMatrixMultiplication(size, num_threads);
        }
    }
    return 0;
}
